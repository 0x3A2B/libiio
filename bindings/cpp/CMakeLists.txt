cmake_minimum_required(VERSION 3.1.0)
project(libiio-cpp CXX)

set(LIBIIOXX_PC ${CMAKE_CURRENT_BINARY_DIR}/libiio++.pc)
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/libiio++.pc.cmakein ${LIBIIOXX_PC} @ONLY)
install(FILES ${LIBIIOXX_PC} DESTINATION "${INSTALL_PKGCONFIG_DIR}")

set(LIBIIOXX_CXXFILES ${CMAKE_CURRENT_SOURCE_DIR}/iio.cpp)
set(LIBIIOXX_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/iio.hpp)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

add_library(iio++ ${LIBIIOXX_CXXFILES} ${LIBIIOXX_HEADERS})
set_property(TARGET iio++ PROPERTY CXX_STANDARD 11)
set_property(TARGET iio++ PROPERTY CXX_STANDARD_REQUIRED ON)

set_target_properties(iio++ PROPERTIES VERSION ${VERSION} SOVERSION ${LIBIIO_VERSION_MAJOR} FRAMEWORK TRUE PUBLIC_HEADER ${LIBIIOXX_HEADERS})
target_link_libraries(iio++ LINK_PRIVATE iio)

if (MSVC)
	set_target_properties(iio++ PROPERTIES OUTPUT_NAME libiio++)
endif()

if (NOT SKIP_INSTALL_ALL)
	install(TARGETS iio++
		ARCHIVE DESTINATION "${INSTALL_LIB_DIR}"
		LIBRARY DESTINATION "${INSTALL_LIB_DIR}"
		RUNTIME DESTINATION "${INSTALL_BIN_DIR}"
		FRAMEWORK DESTINATION "${INSTALL_LIB_DIR}"
		PUBLIC_HEADER DESTINATION "${INSTALL_INC_DIR}")
endif()
