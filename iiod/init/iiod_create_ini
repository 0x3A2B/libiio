#!/bin/sh
set -eu
#
# This is expected to be run as a startup script before the IIO Daemon is started.
#

if [ $(id -u) -ne 0 ] ; then
	echo "Please run as root"
	exit 1
fi

INI_FILE=/etc/libiio.ini

message() {
	[ -x /usr/bin/logger ] || return
	if [ -z "$1" ]; then
		return
	fi
	logger -t iiod_create_ini "$@"
	echo $@
}

# remove this from the file, to make sure stale data isn't hanging around
remove() {
	# If this is called with something that is blank, don't do anything.
	if [ ${#1} -eq 0 ] ; then
		return
	fi
	if [ ! -f ${INI_FILE} ] ; then
		return
	fi
	if ! grep -q $1 ${INI_FILE} ; then
		return
	fi
	rep=$(grep -e "^$1=" ${INI_FILE})
	message "removing ${rep}"
	sed -i "/^${1}=/d" ${INI_FILE}
}
# build up /etc/libiio.ini or add to it if it is not there
# takes two arguments, 1 = context attribute name; 2 = value
replace_or_add() {
	# If this is called with something that is blank, don't add anything.
	if [ ${#1} -eq 0 ] ; then
		return
	fi
	if [ ${#2} -eq 0 ] ; then
		remove $1
		return
	fi

	if [ ! -f ${INI_FILE} ] ; then
		message "Creating ${INI_FILE}"
		echo "# This file is autogenerated from $0" > ${INI_FILE}
		echo "# autodate" >> ${INI_FILE}
	else
		if [ $(grep autodate ${INI_FILE} | wc -c) -eq 0 ] ; then
			sed -i '1a# autodate' /etc/libiio.ini
		fi
	fi
	sed -i -e "/autodate/c # autodate $(date)" ${INI_FILE}
	grep -q '\[Context Attributes\]' ${INI_FILE} || echo "[Context Attributes]" >> ${INI_FILE}
	if grep -q -e "^$1=" ${INI_FILE} ; then
		rep=$(echo $2 | sed -e 's/\[/\\\[/g' -e 's/\]/\\\]/g')
		if grep -q -e "^$1=$rep$" ${INI_FILE} ; then
			return
		fi
		rep=$(grep -e "^$1=" ${INI_FILE})
		message "replacing $rep with $1=$2"
		sed -i -e "/$1/c $1=$2" ${INI_FILE}
	else
		message "adding $1=$2"
		echo "$1=$2" >> ${INI_FILE}
	fi
}

MODEL="/sys/firmware/devicetree/base/model"
DMI="/sys/class/dmi/id/board_vendor"
if [ -f "${MODEL}" ] ; then
	# Most ARM systems will fill /sys/firmware;
	BASE=$(cat $MODEL)
elif [ -f "${DMI}" ] ; then
	# most x86 will fill out Desktop Management Interface
	BASE=$(cat "/sys/class/dmi/id/product_name")
	VENDOR=$(cat "${DMI}")
fi

# is fru-dump installed (useful for FMC cards)
# https://github.com/analogdevicesinc/fru_tools
if command -v fru-dump > /dev/null ; then
	FRU_DUMP=fru-dump
fi

# If this is an FMC Board, capture the data
for i in $(find /sys/devices -name eeprom)
do
	if [ "${FRU_DUMP}x" != "x" -a `stat -c %s $i` -eq "256" ] ; then
		${FRU_DUMP} $i > /dev/null
		if [ $? -eq "0" ] ; then
			BOARD=$(fru-dump $i -b | grep "Part Number" | awk -F: '{print $2}' | sed 's/^[[:space:]]*//')
			SERIAL=$(fru-dump $i -b | grep "Serial Number" | awk -F: '{print $2}' | sed 's/^[[:space:]]*//')
			NAME=$(fru-dump $i -b | grep "Product Name" | awk -F: '{print $2}' | sed 's/^[[:space:]]*//')
			VENDOR=$(fru-dump $i -b | grep "Manufacturer" | awk -F: '{print $2}' | sed 's/^[[:space:]]*//')

			#If running on an FPGA target, display that
			SYSID="$(dmesg | grep axi_sysid | cut -d " " -f 3- | sed -e 's/</[/' -e 's/>/]/')"
			break
		fi
	fi
done

# If you are a Raspberry Pi, add that
if [ -d "/sys/firmware/devicetree/base/hat" ] ; then
	BOARD=$(cat "/sys/firmware/devicetree/base/hat/product_id")
	SERIAL=$(cat "/sys/firmware/devicetree/base/hat/uuid")
	NAME=$(cat "/sys/firmware/devicetree/base/hat/product")
	VENDOR=$(cat "/sys/firmware/devicetree/base/hat/vendor")
fi

if [ "${SYSID+x}x" != "x" ] ; then
	replace_or_add hdl_system_id "${SYSID}"
else
	remove hdl_system_id
fi

if [ "${BOARD+x}x" != "x" -a "${BASE}x" != "x" ] ; then
	replace_or_add hw_model "${BOARD} on ${BASE}"
else
	remove hw_model
fi

if [ "${BASE+x}x" != "x" ] ; then
	replace_or_add hw_carrier "${BASE}"
else
	replace_or_add hw_carrier unknown
fi

if [ "${BOARD+x}x" != "x" ] ; then
	replace_or_add hw_mezzanine "${BOARD}"
else
	remove hw_mezzanine
fi

if [ "${NAME+x}x" != "x" ] ; then
	replace_or_add hw_name "${NAME}"
else
	remove hw_name
fi

if [ "${VENDOR+x}x" != "x" ] ; then
	replace_or_add hw_vendor "${VENDOR}"
else
	remove hw_vendor
fi

if [ "${SERIAL+x}x" != "x" ] ; then
	replace_or_add hw_serial "${SERIAL}"
else
	remove hw_serial
fi

